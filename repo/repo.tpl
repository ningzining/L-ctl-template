// Code generated by L-ctl.

package {{.pkg}}

import (
    "context"
	"gorm.io/gorm"
)

type {{.name}}Repo struct {
	db *gorm.DB
}

type I{{.name}}Repo interface {
	Create(ctx context.Context, po *model.{{.name}}) error
	CreateInBatches(ctx context.Context, list []*model.{{.name}}) error
	Delete(ctx context.Context, id int64) error
	Update(ctx context.Context, po *model.{{.name}}) error
	FindById(ctx context.Context, id int64) (*model.{{.name}}, error)
	FindByPage(ctx context.Context, page int, pageSize int) ([]*model.{{.name}}, error)
	FindAll(ctx context.Context) ([]*model.{{.name}}, error)
	Count(ctx context.Context) (int64, error)
}

func New{{.name}}Repo(db *gorm.DB) I{{.name}}Repo {
	return &{{.name}}Repo{db: db}
}

func (r *{{.name}}Repo) TableName() string {
	return "{{.tableName}}"
}

func (r *{{.name}}Repo) Create(ctx context.Context, po *model.{{.name}}) error {
	return r.db.Table(r.TableName()).Create(&po).Error
}

func (r *{{.name}}Repo) CreateInBatches(ctx context.Context, list []*model.{{.name}}) error {
	return r.db.Table(r.TableName()).CreateInBatches(list, len(list)).Error
}

func (r *{{.name}}Repo) Delete(ctx context.Context, id int64) error {
	return r.db.Table(r.TableName()).Where("id = ?", id).Update("deleted", 1).Error
}

func (r *{{.name}}Repo) Update(ctx context.Context, po *model.{{.name}}) error {
	return r.db.Table(r.TableName()).Where("id = ?", po.Id).Save(&po).Error
}

func (r *{{.name}}Repo) FindById(ctx context.Context, id int64) (po *model.{{.name}}, err error) {
	err = r.db.Table(r.TableName()).Where("id = ?", id).Find(&po).Error
	return
}

func (r *{{.name}}Repo) FindByPage(ctx context.Context, page int, pageSize int) (list []*model.{{.name}}, err error) {
	err = r.db.Table(r.TableName()).Order("id asc").Offset((page-1) * pageSize).Limit(pageSize).Find(&list).Error
	return
}

func (r *{{.name}}Repo) FindAll(ctx context.Context) (list []*model.{{.name}}, err error) {
	err = r.db.Table(r.TableName()).Order("id asc").Find(&list).Error
	return
}

func (r *{{.name}}Repo) Count(ctx context.Context) (count int64, err error) {
	err = r.db.Table(r.TableName()).Count(&count).Error
	return
}